from TM1py.Services import ElementService, TM1Service
import pandas as pd

def get_parent_child_with_attributes(tm1_server, dimension_name, parent_attr, child_attr):
  """
  Retrieves parent-child relationships with user-specified attributes for a dimension.

  Args:
      tm1_server: TM1 Service object.
      dimension_name: Name of the dimension.
      parent_attr: Attribute of the parent element (optional).
      child_attr: Attribute of the child element.

  Returns:
      pandas.DataFrame: Dataframe containing parent (if applicable), parent_attr, child, and child_attr.
  """
  # Get all elements with attributes in a single call
  elements_df = pd.DataFrame(tm1_server.elements.get_elements_dataframe(
      dimension_name=dimension_name, attributes=[child_attr]))

  # Check if parent attribute is provided
  if parent_attr:
    # Add a "Parent" column with potential missing values (NaN)
    elements_df["Parent"] = elements_df["Parent"].apply(lambda p: p.name if p else pd.NA)
    # Fill missing values with None for consistency
    elements_df["Parent"].fillna(None, inplace=True)

  # Select relevant columns and rename for clarity
  df = elements_df[["Parent", parent_attr if parent_attr else None, "Name", child_attr]]
  df.rename(columns={"Name": "Child"}, inplace=True)

  return df

# Example usage (same as previous example)
# Example usage
server_address = "your_tm1_server_address"
server_port = 12345
username = "your_username"
password = "your_password"

with TM1Service(address=server_address, port=server_port, user=username, password=password) as tm1:
  # Replace with your desired dimension name, parent attribute, and child attribute
  dimension_name = "Products"
  parent_attr = "Color"
  child_attr = "Category"

  df = get_parent_child_with_attributes(tm1, dimension_name, parent_attr, child_attr)

  print(df)
