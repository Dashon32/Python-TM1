from TM1py.Services import TM1Service
from TM1py.Utils.Utils import build_element_unique_names, CaseAndSpaceInsensitiveSet
import pandas as pd

def get_hierarchy_for_elements_in_mdx(mdx_query):
    # Connect to TM1 server
    tm1 = TM1Service(address="tm1_server_address", port="tm1_port", user="username", password="password")

    # Extract element names from MDX query
    element_names = [element.replace("[", "").replace("]", "") for element in mdx_query.split(" ")[-1].split(",")]

    hierarchy_data = []

    for name in element_names:
        # MDX query to retrieve the tree hierarchy for a specific element
        mdx = f"SELECT Hierarchize({{TM1FILTERBYLEVEL( {{DESCENDANTS( [YourDimension].[YourHierarchy].[{name}] )}}, 0)}}) ON ROWS FROM [YourCube]"

        # Execute the MDX query
        result = tm1.cubes.cells.execute_mdx(mdx)

        # Extract unique element names from the result
        element_names_result = build_element_unique_names(result.raw_cellset)

        # Get the unique levels in the hierarchy
        levels = CaseAndSpaceInsensitiveSet([name.count('].[') for name in element_names_result])

        # Create dictionary to store hierarchy data for this element
        element_hierarchy_data = {"Element": name}

        # Store hierarchy data in dictionary
        for level in sorted(levels):
            level_elements = [name for name in element_names_result if name.count('].[') == level]
            element_hierarchy_data[f"Level_{level}"] = ", ".join(level_elements)

        hierarchy_data.append(element_hierarchy_data)

    # Disconnect from TM1 server
    tm1.logout()

    # Convert hierarchy data to DataFrame
    df = pd.DataFrame(hierarchy_data)

    return df

# Example MDX query pointing to elements in a dimension
mdx_query = "SELECT {[Element1], [Element2], [Element3]} ON ROWS FROM [YourCube]"

# Call the function to retrieve the hierarchy for elements in the MDX query
hierarchy_df = get_hierarchy_for_elements_in_mdx(mdx_query)
